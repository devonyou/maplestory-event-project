syntax = "proto3";

package event;

service EventService {
    rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse);
    rpc FindEventList(FindEventListRequest) returns (FindEventListResponse);
    rpc FindEventById(FindEventByIdRequest) returns (FindEventByIdResponse);
    rpc CreateEventReward(CreateEventRewardRequest) returns (CreateEventRewardResponse);
    rpc ParticipateEvent(ParticipateEventRequest) returns (ParticipateEventResponse);
    rpc FindEventParticipate(FindEventParticipateRequest) returns (FindEventParticipateResponse);
}

enum EventConditionType {
    ATTENDANCE = 0;
    CLEAR_BOSS = 1;
}

enum EventRewardType {
    MAPLE_POINT = 0;
    MAPLE_COIN = 1;
}

enum EventStatus {
    ACTIVE = 0;
    INACTIVE = 1;
    COMPLETED = 2;
}

enum EventParticipateStatus {
    REJECTED = 0;
    SUCCESS = 1;
}

message EventCondition {
    EventConditionType type = 1;
    map<string, string> payload = 2;
}

message EventReward {
    optional string id = 1;
    EventRewardType type = 2;
    int32 amount = 3;
}

message Event {
    optional string id = 1;
    string title = 2;
    bool isActive = 3;
    EventCondition eventCondition = 4;
    // repeated EventReward eventRewardItems = 5;
    string startDate = 6;
    string endDate = 7;
}

message EventSummary {
    string id = 1;
    string title = 2;
}

message EventParticipate {
    optional string id = 1;
    Event event = 2;
    string userId = 3;
    EventParticipateStatus status = 4;
    EventRewardType rewardType = 5;
    int32 amount = 6;
    string rejectedReason = 7;
    string createdAt = 8;
}

message CreateEventRequest {
    string title = 1;
    EventCondition eventCondition = 2;
    string startDate = 3;
    string endDate = 4;
    bool isActive = 5;
}

message CreateEventResponse {
    string id = 1;
    string title = 2;
    EventCondition eventCondition = 3;
    string startDate = 4;
    string endDate = 5;
    bool isActive = 6;
}

message FindEventListRequest {
    bool isActive = 1;
    EventStatus status = 2;
}

message FindEventListResponse {
    repeated EventSummary events = 1;
}

message FindEventByIdRequest {
    string eventId = 1;
}

message FindEventByIdResponse {
    string id = 1;
    string title = 2;
    EventCondition eventCondition = 3;
    repeated EventReward eventRewardItems = 4;
    string startDate = 5;
    string endDate = 6;
    bool isActive = 7;
}

message CreateEventRewardRequest {
    string eventId = 1;
    EventReward eventReward = 2;
}

message CreateEventRewardResponse {
    string eventId = 1;
    string eventTitle = 2;
    EventReward eventReward = 3;
}

message ParticipateEventRequest {
    string eventId = 1;
    EventRewardType rewardType = 2;
    string userId = 3;
}

message ParticipateEventResponse {
    EventParticipateStatus status = 1;
    string message = 2;
}

message FindEventParticipateRequest {
    optional string eventId = 1;
    optional string userId = 2;
    optional EventParticipateStatus status = 3;
}

message FindEventParticipateResponse {
    repeated EventParticipate eventParticipates = 1;
}