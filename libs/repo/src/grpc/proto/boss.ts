// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/boss.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "boss";

export enum EventBossType {
  SWOO = 0,
  DEMIAN = 1,
  UNRECOGNIZED = -1,
}

export interface ClearBossRequest {
  userId: string;
  clearDate: string;
  bossId: EventBossType;
}

export interface ClearBossResponse {
  isCleared: boolean;
}

export interface FindBossClearRequest {
  userId: string;
  startDate: string;
  endDate: string;
  bossId: EventBossType;
}

export interface FindBossClearResponse {
  isCleared: boolean;
}

export const BOSS_PACKAGE_NAME = "boss";

export interface BossServiceClient {
  clearBoss(request: ClearBossRequest, metadata?: Metadata): Observable<ClearBossResponse>;

  findBossClear(request: FindBossClearRequest, metadata?: Metadata): Observable<FindBossClearResponse>;
}

export interface BossServiceController {
  clearBoss(
    request: ClearBossRequest,
    metadata?: Metadata,
  ): Promise<ClearBossResponse> | Observable<ClearBossResponse> | ClearBossResponse;

  findBossClear(
    request: FindBossClearRequest,
    metadata?: Metadata,
  ): Promise<FindBossClearResponse> | Observable<FindBossClearResponse> | FindBossClearResponse;
}

export function BossServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["clearBoss", "findBossClear"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BossService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BossService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOSS_SERVICE_NAME = "BossService";
