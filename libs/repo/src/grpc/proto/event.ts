// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/event.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "event";

export enum EventConditionType {
  ATTENDANCE = 0,
  CLEAR_BOSS = 1,
  UNRECOGNIZED = -1,
}

export enum EventRewardType {
  MAPLE_POINT = 0,
  MAPLE_COIN = 1,
  UNRECOGNIZED = -1,
}

export enum EventStatus {
  ACTIVE = 0,
  INACTIVE = 1,
  COMPLETED = 2,
  UNRECOGNIZED = -1,
}

export interface EventCondition {
  type: EventConditionType;
  payload: { [key: string]: string };
}

export interface EventCondition_PayloadEntry {
  key: string;
  value: string;
}

export interface EventReward {
  id: string;
  type: EventRewardType;
  amount: number;
}

export interface Event {
  id: string;
  title: string;
  isActive: boolean;
  eventCondition:
    | EventCondition
    | undefined;
  /** repeated EventReward eventRewardItems = 5; */
  startDate: string;
  endDate: string;
}

export interface EventSummary {
  id: string;
  title: string;
  isActive: boolean;
}

export interface CreateEventRequest {
  title: string;
  eventCondition: EventCondition | undefined;
  startDate: string;
  endDate: string;
  isActive: boolean;
}

export interface CreateEventResponse {
  id: string;
  title: string;
  eventCondition: EventCondition | undefined;
  startDate: string;
  endDate: string;
  isActive: boolean;
}

export interface FindEventListRequest {
  isActive: boolean;
  status: EventStatus;
}

export interface FindEventListResponse {
  events: EventSummary[];
}

export interface FindEventByIdRequest {
  eventId: string;
}

export interface FindEventByIdResponse {
  id: string;
  title: string;
  eventCondition: EventCondition | undefined;
  eventRewardItems: EventReward[];
  startDate: string;
  endDate: string;
  isActive: boolean;
}

export interface CreateEventRewardRequest {
  eventId: string;
  eventReward: EventReward | undefined;
}

export interface CreateEventRewardResponse {
  eventId: string;
  eventTitle: string;
  eventReward: EventReward | undefined;
}

export const EVENT_PACKAGE_NAME = "event";

export interface EventServiceClient {
  createEvent(request: CreateEventRequest, metadata?: Metadata): Observable<CreateEventResponse>;

  findEventList(request: FindEventListRequest, metadata?: Metadata): Observable<FindEventListResponse>;

  findEventById(request: FindEventByIdRequest, metadata?: Metadata): Observable<FindEventByIdResponse>;

  createEventReward(request: CreateEventRewardRequest, metadata?: Metadata): Observable<CreateEventRewardResponse>;
}

export interface EventServiceController {
  createEvent(
    request: CreateEventRequest,
    metadata?: Metadata,
  ): Promise<CreateEventResponse> | Observable<CreateEventResponse> | CreateEventResponse;

  findEventList(
    request: FindEventListRequest,
    metadata?: Metadata,
  ): Promise<FindEventListResponse> | Observable<FindEventListResponse> | FindEventListResponse;

  findEventById(
    request: FindEventByIdRequest,
    metadata?: Metadata,
  ): Promise<FindEventByIdResponse> | Observable<FindEventByIdResponse> | FindEventByIdResponse;

  createEventReward(
    request: CreateEventRewardRequest,
    metadata?: Metadata,
  ): Promise<CreateEventRewardResponse> | Observable<CreateEventRewardResponse> | CreateEventRewardResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createEvent", "findEventList", "findEventById", "createEventReward"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
